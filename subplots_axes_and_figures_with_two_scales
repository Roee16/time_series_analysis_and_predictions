'''
# subplots_axes_and_figures_with_two_scales
# https://matplotlib.org/3.1.3/gallery/subplots_axes_and_figures/two_scales.html
# Two plots on the same axes with different left and right scales.
# The trick is to use two different axes that share the same x axis. You can use separate matplotlib.ticker formatters and locators as desired since the two axes are independent.

# Such axes are generated by calling the Axes.twinx() method. Likewise, Axes.twiny() is available to generate axes that share a y axis but have different top and bottom scales.
'''
t = df_price_with_date_features.loc[mask]['Date']
data1= df_price_with_date_features.loc[mask]['Volume']
data2 = df_price_with_date_features.loc[mask]['High']
fig, ax1 = plt.subplots(figsize=(15, 8))

color = 'tab:red'
ax1.set_xlabel('Date (Day)')
ax1.set_ylabel('Volume', color=color)
ax1.plot(t, data1, color=color)
ax1.tick_params(axis='y', labelcolor=color)

ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis

color = 'tab:blue'
ax2.set_ylabel('High Price', color=color)  # we already handled the x-label with ax1
ax2.plot(t, data2, color=color)
ax2.tick_params(axis='y', labelcolor=color)

fig.tight_layout()  # otherwise the right y-label is slightly clipped
plt.show()
